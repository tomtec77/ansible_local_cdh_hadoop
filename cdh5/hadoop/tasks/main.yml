---
- name: Check if downloadable archive exists
  stat: path={{ downloads }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}.tar.gz
  register: archive

- name: Get Hadoop binary
  get_url: url=http://archive-primary.cloudera.com/cdh{{ cdh_major }}/cdh/{{ cdh_major }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}.tar.gz dest={{ downloads }} timeout=100
  when: archive.stat.exists == false
  tags:
  - download

- name: Check if unpacked archive exists
  stat: path={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}
  register: unpacked

- name: Unarchive Hadoop binary
  unarchive: copy=no src={{ downloads }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}.tar.gz dest={{ install_dir }}
  when: unpacked.stat.exists == false
  tags:
  - extract

- name: Bash profile generation
  template: src=hadoop/templates/profile/bash_profile_hadoop.tmpl dest={{ install_dir }}/.bash_profile_hadoop
  tags:
  - profile

- name: Copy local Hadoop config
  copy: src=hadoop/files/configs/conf.local dest={{ install_dir }}
  tags:
  - configs

- name: Copy pseudo Hadoop config
  copy: src=hadoop/files/configs/conf.pseudo dest={{ install_dir }}
  tags:
  - configs

- name: Copy pseudo Hadoop config templates
  template: src=hadoop/templates/configs/conf.pseudo/{{ item }} dest={{ install_dir }}/conf.pseudo/{{ item }}
  with_items:
  - hdfs-site.xml
  - mapred-site.xml
  - yarn-site.xml
  tags:
  - configs

- name: Create directories for pseudo cluster
  file: path={{ item }} state=directory
  with_items:
  - "{{ install_dir }}/var/lib/hadoop-hdfs/cache/{{ ansible_env.USER }}/dfs/name"
  - "{{ install_dir }}/var/lib/hadoop-hdfs/cache/{{ ansible_env.USER }}/dfs/namesecondary"
  - "{{ install_dir }}/var/lib/hadoop-hdfs/cache/{{ ansible_env.USER }}/dfs/data"
  - "{{ install_dir }}/var/lib/hadoop-mapreduce/cache/{{ ansible_env.USER }}/tasks"
  - "{{ install_dir }}/var/lib/hadoop-yarn/cache/{{ ansible_env.USER }}/nm-local-dir"
  - "{{ install_dir }}/var/log/hadoop-yarn/containers"
  tags:
  - configs

- name: Fix Hadoop-config.sh
  lineinfile: dest={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}/libexec/hadoop-config.sh backup=yes regexp="^\s+(export JAVA_HOME=)\(\$.*$" backrefs=yes line="\1$(/usr/libexec/java_home)"
  tags:
  - bugfix

- name: Fix Hadoop-config.sh part 2
  lineinfile: dest={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}/libexec/hadoop-config.sh backup=yes regexp="^\s+(export JAVA_HOME=)\(/.*$" backrefs=yes line="\1/Library/Java/Home"
  tags:
  - bugfix

- name: Get latest snappy jar to fix snappy OSX bug
  get_url: url=https://oss.sonatype.org/content/repositories/releases/org/xerial/snappy/snappy-java/{{ snappy_version }}/snappy-java-{{ snappy_version }}.jar dest={{ downloads }}  timeout=100
  tags:
  - snappyfix

- name: Check if snappy jar with bug exists in common/lib
  stat: path={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}/share/hadoop/common/lib/snappy-java-1.0.4.1.jar
  register: snappy_common
  tags:
  - snappyfix

- name: Check if snappy jar with bug exists in tools/lib
  stat: path={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}/share/hadoop/tools/lib/snappy-java-1.0.4.1.jar
  register: snappy_tools
  tags:
  - snappyfix

- name: Remove buggy snappy jar from common/lib
  file: name={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}/share/hadoop/common/lib/snappy-java-1.0.4.1.jar state=absent
  when: snappy_common.stat.exists == true
  tags:
  - snappyfix

- name: Remove buggy snappy jar from tools/lib
  file: name={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}/share/hadoop/tools/lib/snappy-java-1.0.4.1.jar state=absent
  when: snappy_tools.stat.exists == true
  tags:
  - snappyfix

- name: Add latest version of snappy jar to common/lib
  copy: src={{ downloads }}/snappy-java-{{ snappy_version }}.jar dest={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}/share/hadoop/common/lib/
  when: snappy_common.stat.exists == true
  tags:
  - snappyfix

- name: Add latest version of snappy jar to tools/lib
  copy: src={{ downloads }}/snappy-java-{{ snappy_version }}.jar dest={{ install_dir }}/hadoop-{{ hadoop_version }}-cdh{{ cdh_version }}/share/hadoop/tools/lib/
  when: snappy_tools.stat.exists == true
  tags:
  - snappyfix
